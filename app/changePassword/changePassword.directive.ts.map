{"version":3,"names":[],"mappings":"","sources":["changePassword/changePassword.directive.ts"],"sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n    selector: '[validatePassword][formControlName],[validatePassword] [formControl], [validatePassword][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS, useExisting: forwardRef(() => PasswordValidator), multi: true\n    }\n    ]\n\n})\n\nexport class PasswordValidator implements Validator {\n    constructor( @Attribute('validatePassword') public validatePassword: string,\n        @Attribute('reverse') public reverse: string) { }\n\n    private get isReverse() {\n        if (!this.reverse) return false;\n        return this.reverse === 'true' ? true : false;\n    }\n\n    validate(confPsswd: AbstractControl): { [key: string]: any } {\n        //self value\n        let confirmPassword = confPsswd.value;\n        //control value\n        let password = confPsswd.root.get(this.validatePassword);\n        //value not equal\n        if (password && confirmPassword !== password.value && !this.isReverse) {\n            return {\n                validatePassword: false\n            }\n        }\n\n        //error msg disappers when password field is retyped\n        if (password && confirmPassword === password.value && this.isReverse) {\n            delete password.errors['validatePassword'];\n            if (!Object.keys(password.errors).length) password.setErrors(null);\n        }\n\n        //new validation when password field has new value\n        if (password && confirmPassword !== password.value && this.isReverse) {\n            password.setErrors({ validatePassword: false });\n        }\n\n        return null;\n\n    }\n\n\n\n}\n"],"file":"changePassword/changePassword.directive.ts","sourceRoot":"/source/"}