{"version":3,"names":[],"mappings":"","sources":["common/services/proxy-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport { LoggerService } from \"./logger-service\";\r\nimport { Constants } from \"../constants\";\r\nimport { ContextInfo } from \"./context-info\";\r\nimport { ContextService } from \"./context-service\";\r\nimport \"../../rxjs-operators\"\r\n\r\n@Injectable()\r\nexport class ProxyService {\r\n    constructor(private constants: Constants, private http: Http, private loggerService: LoggerService, private contextService: ContextService) { }\r\n    private baseUrl = this.constants.BaseApiUri;  // URL to web API\r\n\r\n    private createAuthorizationHeader(headers: Headers) {\r\n        headers.append('Authorization', 'Bearer ' + this.contextService.ContextInfo.token);\r\n    }\r\n    private createBasicHeader(headers: Headers) {\r\n        headers.append('Accept', 'application/json');\r\n    }\r\n\r\n    private LogError(error: any) {\r\n        this.loggerService.logException(error);\r\n        return Observable.throw(error); //sends error onto next observer (typically the component in our case)\r\n    }\r\n\r\n    public GetAnonymous(url: string): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.get(this.baseUrl + url, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share(); //make 'em hot\r\n        return observable;\r\n    }\r\n\r\n    public GetFullAnonymous(fullUrl: string): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.get(fullUrl, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n    public PostAnonymous(url: string, data: any): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.post(this.baseUrl + url, data, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n    public Get(url: string): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createAuthorizationHeader(headers);\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.get(this.baseUrl + url, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n    public Post(url: string, data: any): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createAuthorizationHeader(headers);\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.post(this.baseUrl + url, data, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n    public Put(url: string, data: any): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createAuthorizationHeader(headers);\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.put(this.baseUrl + url, data, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n    public Delete(url: string): Observable<any> {\r\n        let headers = new Headers();\r\n        this.createAuthorizationHeader(headers);\r\n        this.createBasicHeader(headers);\r\n\r\n        let observable = this.http.delete(this.baseUrl + url, { headers: headers }).map(res => res.json()).catch(e => this.LogError(e)).share();\r\n        return observable;\r\n    }\r\n\r\n}"],"file":"common/services/proxy-service.ts","sourceRoot":"/source/"}