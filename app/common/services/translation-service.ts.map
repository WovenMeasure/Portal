{"version":3,"names":[],"mappings":"","sources":["common/services/translation-service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { ProxyService } from \"./proxy-service\";\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport { AsyncSubject }     from 'rxjs/AsyncSubject';\r\nimport \"../../rxjs-operators\"\r\n\r\n@Injectable()\r\nexport class TranslationService {\r\n    private _engine: any;\r\n    private _initialized: AsyncSubject<boolean> = new AsyncSubject<boolean>();\r\n\r\n    constructor(private proxyService: ProxyService) {\r\n    }\r\n\r\n\r\n    public init() {\r\n        let language: string = this.getFirstBrowserLanguage();\r\n        if (language.indexOf('-') !== -1)\r\n            language = language.split('-')[0];\r\n\r\n        if (language.indexOf('_') !== -1)\r\n            language = language.split('_')[0];\r\n\r\n        console.log(language);\r\n        let languageFilePath: string = 'app/translations/wellview-participantportal-' + language + '.js';\r\n        let ssid: string = \"id_\" + language;\r\n        if (sessionStorage) {\r\n            if (sessionStorage.getItem(ssid)) {\r\n                this._engine = JSON.parse(sessionStorage.getItem(ssid));\r\n                this._initialized.next(true);\r\n            }\r\n            else {\r\n                this.proxyService.GetFullAnonymous(languageFilePath).map(res => res)\r\n                    .subscribe(res => {\r\n                        sessionStorage.setItem(ssid, JSON.stringify(res));\r\n                        this._engine = res;\r\n                        this._initialized.next(true);\r\n                    });\r\n            }\r\n        }\r\n        else {\r\n            this.proxyService.GetFullAnonymous(languageFilePath).map(res => res)\r\n                .subscribe(res => {\r\n                    sessionStorage.setItem(ssid, JSON.stringify(res));\r\n                    this._engine = res;\r\n                    this._initialized.next(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    private getFirstBrowserLanguage() {\r\n        let nav: Navigator = window.navigator;\r\n        let browserLanguagePropertyKeys: any = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'];\r\n        let i: number = 0;\r\n        let language: string = \"\";\r\n\r\n        for (i = 0; i < browserLanguagePropertyKeys.length; i++) {\r\n            language = nav[browserLanguagePropertyKeys[i]];\r\n            if (language && language.length) {\r\n                return language;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getEngine(): AsyncSubject<any> {\r\n\r\n        var subject = new AsyncSubject<any>();\r\n\r\n        this._initialized.subscribe(function (b: boolean) {\r\n            subject.next(this._engine);\r\n        });\r\n\r\n        return subject;\r\n    }\r\n}"],"file":"common/services/translation-service.ts","sourceRoot":"/source/"}