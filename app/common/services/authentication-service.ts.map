{"version":3,"names":[],"mappings":"","sources":["common/services/authentication-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport { LoggerService } from \"./logger-service\";\r\nimport { ProxyService } from \"./proxy-service\";\r\nimport { ContextService } from \"./context-service\";\r\nimport { Constants } from \"../constants\";\r\nimport { ContextInfo } from \"./context-info\";\r\nimport \"../../rxjs-operators\"\r\n\r\n@Injectable()    \r\nexport class AuthenticationService {\r\n    constructor(private proxyService: ProxyService, private contextService: ContextService) { }\r\n\r\n    public Login(email: string, password: string): Observable<any> {\r\n        let observable$ = this.proxyService.PostAnonymous(\"account/authenticate\", { Username: email, Password: password }).share();\r\n        observable$.subscribe(\r\n            data => {\r\n                if (data.success) {\r\n                    this.contextService.ContextInfo.fullName = data.user.fullName;\r\n                    this.contextService.ContextInfo.userId = data.user.id;\r\n                    this.contextService.ContextInfo.email = data.user.email;\r\n                    this.contextService.ContextInfo.token = data.token;\r\n                    this.contextService.ContextInfo.tokenExpires = data.tokenExpirationDate;\r\n                    this.contextService.LoggedIn = true;\r\n                }\r\n            });\r\n        return observable$;     \r\n    }\r\n  \r\n    public Logoff() {\r\n        this.contextService.Clear();\r\n    }\r\n   \r\n}"],"file":"common/services/authentication-service.ts","sourceRoot":"/source/"}